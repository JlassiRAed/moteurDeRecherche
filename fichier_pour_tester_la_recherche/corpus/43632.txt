 Very Long Instruction Word or VLIW which refers to a Central processing unit CPU Computer architecture architecture designed to take advantage of instruction level parallelism A processor that executes every Instruction may use processor resources Efficiency inefficiently leading to poor Computer performance performance The performance can be improved by using Microarchitecture micro architectural design technique s that use instruction level parallelism ILP including Instruction pipelining where the execution of multiple Instruction Superscalar execution in which multiple execution unit s are used to execute multiple Instruction instructions in parallel Out of order execution where Instruction instructions execute in any order but without violating Data dependency data dependencies Register renaming which is a technique used to avoid unnecessary serialization of program Instruction instructions caused by the reuse of registers by those instructions in order to enable out of order execution Speculative execution which allow the execution of complete Instruction instructions or parts of instructions before being sure whether this execution is required Branch prediction which is used to avoid delays cause of control dependencies to be resolved Branch prediction is used with speculative execution All above instruction level parallelism ILP technique s are implemented at a higher cost with increased hardware complexity Before executing any operations in parallel the processor must verify that the instructions do not have dependence analysis interdependencies There are many types of interdependencies but a simple example would be a program in which the first instruction s result is used as an input for the second instruction They clearly cannot execute at the same time and the second instruction cannot be executed before the first Modern Out of order execution out of order processor s use major resources in order to take advantage of these techniques since the scheduling of instructions must be determined dynamically as a program executes based on dependencies The VLIW approach on the other hand executes operation in parallel based on a fixed schedule determined when programs are compiler compiled Since determining the order of execution of Instruction is handled by the compiler the processor does not need the complex hardware required by instruction level parallelism ILP technique s described above As a result VLIW CPUs offer significant computation al power with less hardware complexity but with greater compiler design complexity The VLIW approach is a concept which is only useful as the code generated by a compiler makes it but with a number of special purpose instructions available to simplify certain complicated operations In superscalar designs the number of execution unit s is invisible to the instruction set Each instruction encodes only one operation For most superscalar design s the instruction width is bits or less In contrast one VLIW instruction encodes multiple operations specifically one instruction encodes at least one operation for each execution unit of the device For example if a VLIW device has five execution units then a VLIW instruction for that device would have five operation fields each field specifying what operation should be done on that corresponding execution unit In order to find a space for these operation fields VLIW instructions are usually at least bit s in width and on some architectures bit s or wider this is how the name comes 